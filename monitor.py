import time
import json
import smtplib
import os
import ssl
import datetime
import urllib.parse

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from utils import verify_url

CHECK_INTERVAL = 60  # gi√¢y
SIGNATURE_FILE = "signatures/hash_data.json"
NFT_INFO_FILE = "nft_info.json"
ALERTED_HASHES_FILE = "alerted_hashes.json"

# Th√¥ng tin Gmail g·ª≠i c·∫£nh b√°o
fromAddr = "haodoctor776@gmail.com"
toAddr = "haodoctor776@gmail.com"


def send_email(subject, body, toAddr):
    msg = MIMEMultipart()
    msg["Subject"] = subject
    msg["From"] = fromAddr
    msg["To"] = toAddr

    # Th√™m ph·∫ßn n·ªôi dung v√†o email
    msg.attach(MIMEText(body, 'plain'))

    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(fromAddr, "cvwi boel kwpo hpif")  # App password
        server.sendmail(fromAddr, toAddr, msg.as_string())
        server.quit()
    except Exception as e:
        print(f"L·ªói g·ª≠i email: {e}")


def load_alerted_hashes():
    if os.path.exists(ALERTED_HASHES_FILE):
        with open(ALERTED_HASHES_FILE, "r") as f:
            return json.load(f)
    return {}


def save_alerted_hashes(data):
    with open(ALERTED_HASHES_FILE, "w") as f:
        json.dump(data, f, indent=2)


def monitor():
    while True:
        try:
            with open(NFT_INFO_FILE, "r") as f:
                nft_data = json.load(f)
            urls = list(nft_data.keys())

            alerted_hashes = load_alerted_hashes()

            for url in urls:
                match, current_hash, expected_hash = verify_url(url)
                if expected_hash is None:
                    continue

                alerted_list = alerted_hashes.get(url, [])
                if isinstance(alerted_list, str):
                    alerted_list = [alerted_list]

                if not match:
                    if current_hash not in alerted_list:
                        subject = "üî¥ C·∫¢NH B√ÅO N·ªòI DUNG B·ªä THAY ƒê·ªîI"
                        detected_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                        base_url = "http://10.18.228.237:5000"
                        url_encoded = urllib.parse.quote(url, safe='')
                        restore_link = f"{base_url}/restore?url={url_encoded}"

                        body = (
                            "Ph√°t hi·ªán t√†i s·∫£n s·ªë ƒë√£ b·ªã thay ƒë·ªïi!\n\n"
                            f"T√†i s·∫£n: {url}\n"
                            f"Th·ªùi gian ph√°t hi·ªán: {detected_time}\n"
                            "L√Ω do: Hash kh√¥ng tr√πng kh·ªõp, n·ªôi dung ƒë√£ b·ªã thay ƒë·ªïi.\n\n"
                            "B·∫°n c√≥ th·ªÉ:\n"
                            f"[Kh√¥i ph·ª•c b·∫£n g·ªëc]: {restore_link}\n"
                            "L∆∞u √Ω: Khi t·∫£i ƒë∆∞·ª£c b·∫£n g·ªëc, b·∫°n vui l√≤ng upload l√™n l·∫°i v√† g·∫Øn ch·ªØ k√Ω tr√™n web ƒë·ªÉ ti·∫øp t·ª•c theo d√µi\n\n"
                            "M·ªçi th·∫Øc m·∫Øc xin vui l√≤ng li√™n h·ªá:\n"
                            "Trung t√¢m CSKH 24/7: TramNKCE180138@fpt.edu.vn\n"
                            "S·ªë ƒëi·ªán tho·∫°i: 0765936972 (Mr. H√†o)\n"
                            "Xin tr√¢n tr·ªçng c·∫£m ∆°n qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª• n√†y.\n\n"
                            "D·ªäCH V·ª§ G·∫ÆN CH·ªÆ K√ù NFT: B·∫¢O M·∫¨T V√å ƒêAM M√ä\n"
                            "ƒê·ªãa ch·ªâ: 600 Nguy·ªÖn VƒÉn C·ª´, ph∆∞·ªùng An B√¨nh, th√†nh ph·ªë C·∫ßn Th∆°\n"
                        )
                        # L·∫•y email ng∆∞·ªùi d√πng t·ª´ nft_info.json
                        user_email = nft_data[url].get("user_email")
                        if user_email:
                            send_email(subject, body, user_email)
                        else:
                            send_email(subject, body, toAddr)  # g·ª≠i v·ªÅ email admin n·∫øu kh√¥ng c√≥
                        print(body)
                        alerted_list.append(current_hash)
                        alerted_hashes[url] = alerted_list
                        save_alerted_hashes(alerted_hashes)
                    else:
                        print(f"ƒê√£ c·∫£nh b√°o: {url}")
                else:
                    print(f"OK: {url}")
        except Exception as e:
            print(f"L·ªói khi gi√°m s√°t: {e}")

        time.sleep(CHECK_INTERVAL)


if __name__ == "__main__":
    monitor()